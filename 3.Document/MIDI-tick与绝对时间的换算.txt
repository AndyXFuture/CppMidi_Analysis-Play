============
4D 54 68 64     // MThd，MIDI头块
00 00 00 06     // MThd头块大小，6字节
------------
00 00           // MIDI 0（零）型文件，所有音符在一个Track中
00 01           // 轨道数，0型文件只有一个Track
01 E0           // 所谓的TPQN，每个四分音符中有0x1E0（480）个MIDI Tick，
------------
4D 54 72 6B     // MTrk，MIDI音轨开始
00 00 12 17     // 此音轨长度为0x1217（4631）字节
......          // 省略一些事件
00              // delta-time
FF              // meta-event标志
51 03           // 四分音符的时长（单位为微秒）
07 27 0E        // 四分音符的时长=0x07270E（468750）微秒
------------
......

    以上是一个MIDI文件中的一段数据结构，以下是我的笔记，欢迎大家批评指正~

    也就是说，绝对时间是通过meta-event中的FF 51 03 xx xx xx来定义的。这个meta-event表明了一个四分音符的绝对时间长度。而一个四分音符包含多少个tick，又是由MThd块中来定义的。所以这样就能换算出一个tick所需要的时间有多长。

    人通常是按照曲子的拍速来度量的。拍速就是指曲子的一分钟有多少拍。通常（有不是通常的时候）一拍就是一个四分音符（quarter-note）。所以（仅在）通常情况下，一拍 == 一个四分音符的长度 == 480个MIDI Tick。

    所以，根据meta-event事件的FF 51 03 xx xx xx，可以得到一个四分音符的绝对时间长度。如果用一分钟（60秒，即60,000,000微秒）来除这个值，就得到了曲子的拍速Tempo。比如上面例子，得到的四分音符时间为468750微秒，所以它的拍速就是：

    Tempo = 60,000,000 / 468,750 = 128 bpm.

    而通过 MThd块中对每个四分音符中包含MIDI Tick数的定义（就是所谓的TPQN，Ticks Per Quarter-Note），将这个四分音符的绝对时间长度，除以TPQN，就得到了每个MIDI Tick的绝对时间。所以示例中的每个MIDI Tick的绝对时间就是：

    468,750 / 480 = 976.5625 us = 976562.5 ns。

    得到每个MIDI Tick的绝对时间之后，就可以根据MCU如主频等的相关参数，转化为MCU定时器的分频系数，从而使用MCU的定时器来产生精确的MIDI Tick。

      至于非通常的情况，有可能一个四分音符是两拍（比如说八六拍的拍号6/8，或者是八七拍7/8，此时八分音符是一拍），也有可能是半拍（比如说二二拍的拍号2/2，此时二分音符是一拍）。这些虽然也有，但用的最多的还是四分音符为一拍的，就是常说的四二拍2/4，四三拍3/4，四四拍4/4，还有比较少见的四五拍5/4。

      不过无论拍号怎么变，一个四分音符的绝对时间长度，和一个四分音符的MIDI Tick数都是不会变的，所以对于MIDI本身来讲，人所感受到的节拍，还有这些拍号，都无所谓，只是一拍多一倍或者少一半Tick而已。MIDI本身只需要数MIDI Tick够不够就好了。